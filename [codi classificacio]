# -*- coding: cp1252 -*-
import os
import xml.etree.ElementTree as ET
import numpy as np
import time
import pandas as pnd
from sklearn import svm
import tfidf

t1 = time.time()

event=['concert','conference','exhibition','fashion','other','protest','sports','theater_dance','no_event']

# classe Imatge -les llistes no es poden inicialitzar dintre la class!
class Imatge:
  iden = ""     # identificador de la imatge
  tags = None   # llista dels tags
  tags_svm = None
  SIFT = None   # [kp][des]
  sol = ''      # soluciÃ³ del fitxer de solucions
  sol_prop = '' # soluciÃ³ proposada despres d'aplicar el classificador
  
# directori metadades xml
dir_xml = "C:\Users\IRENE\Documents\Metadades_imatges\sed2013_task2_dataset_train.xml"
# directori imatges que sen's proporcionen a l'esxamen (.jpg)
#dir_img = "C:\Users\IRENE\Documents\Metadades_imatges\SED2013_task2_photos6"
dir_img = "C:\Users\IRENE\Documents\GitHub\Examen\TEST_IMAGE"
# direcotri solucions csv
dir_sol = "C:\Users\IRENE\Documents\Metadades_imatges\sed2013_task2_dataset_train_gs.csv"
# directori supervector_12345 extracció dels tags del conjunt 12345
dir_sup = "C:\Users\IRENE\Documents\GitHub\Examen\supervector_12345.txt"

# llegim dades supervector # # # # # # # # #
data = open(dir_sup,'r').read().split('\n') #
supervector = data[0].split(" ")[1:]        #
concert = data[1].split(" ")[1:]            #
conference = data[2].split(" ")[1:]         #
exhibition = data[3].split(" ")[1:]         #
fashion = data[4].split(" ")[1:]            #
other = data[5].split(" ")[1:]              #
protest = data[6].split(" ")[1:]            #
sports = data[7].split(" ")[1:]             #
theater_dance = data[8].split(" ")[1:]      #
non_event = data[9].split(" ")[1:]          #
# fi # # # # # # # # # # # # # # # # # # # #



table = tfidf.tfidf()
table.addDocument("concert", concert)
table.addDocument("conference", conference)
table.addDocument("exhibition", exhibition)
table.addDocument("fashion", fashion)
table.addDocument("other", other)
table.addDocument("protest", protest)
table.addDocument("sports",sports)
table.addDocument("theater_dance",theater_dance)
table.addDocument("non_event", non_event)

#event_decision = tfidf.tfidf()
#event_decision.addDocument("event", concert+conference+exhibition+fashion+other+protest+sports+theater_dance)
#event_decision.addDocument("non_event", non_event)

 
nT = len(supervector)   # numero de tags totals

nom_imatges = os.listdir(dir_img)

sol_imatges = pnd.read_csv(dir_sol,sep='\t')

llista_imatges = []     # variable on guardem totes les imatges - ampliar en cas
                        # de consultar les imatges d'una CARPETA

tree = ET.parse(dir_xml)

root = tree.getroot()   # l'etiqueta "arrel" es <photos> en el nostre xml

for foto in root:
    if len(llista_imatges) < len(nom_imatges):
        imatge = Imatge()   # variable tipus Imatge
        imatge.tags = []    # inicialitzar les llistes
        imatge.tags_svm = [0] * nT    # llista de zeros del tamany de supervector
        imatge.SIFT = []
        
        id_tags = []        # variable individual per guardar el identificador i la llista det tags d'una
                            # foto en la pos [0] tenim el id, en la resta de pos tenim els tags
                            
        att_foto = foto.attrib      # tots els atributs de la imatge

        imatge.iden = att_foto["id"]

        eti_foto = foto.getchildren()
        tags = eti_foto[1].getchildren()    # entrem en l'etiqueta tags
        
        for tag in tags:
            imatge.tags.append(tag.text.encode('ascii','ignore'))      # anem guardant els tags en la variable individual

        # un cop recorregut una foto la guardem en la llista d'imatges, nomes si
        # el nom de la imatge esta en la carpeta
        if imatge.iden+".jpg" in nom_imatges:
            
            # busquem la solcuio en el csv
            sol_trobada = sol_imatges[sol_imatges.document_id == imatge.iden]
            sol_imatges = sol_imatges[sol_imatges.document_id != imatge.iden] # un cop ja guardem la soluciÃ³ l'eliminem de la llista per reduir temps de cerca
            imatge.sol = sol_trobada.event_type.to_string().split()[-1].encode('ascii','ignore')   # guardem la soluciÃ³ en la imatge

            # calculem tags_svm
            #imatge.tags_svm = calcula_svm(supervector,imatge.tags)
            
            llista_imatges.append(imatge)   # guardem la imatge en la llista
                      


# llegim les imatges de test i guardem la id per tal de donar la solucio

text_id_sol_tfidf = open("33.txt", "wb") #esto se crea en la carpeta irene
#text_id_sol_tfidf.write("document_id event_type \n")
sol_prop = ''
for i in llista_imatges:

#    new_llindar = event_decision.similarities(i.tags)
    sol = table.similarities(i.tags)
#    if ( sol[8][1] > 0.37 ): 
#        sol_prop = sol[8][0] 
#    else:
#        sol=sol[:-1]
    #encontrar el maximo
    m = 0 # inicializamos a 0
    for s in sol:    
        if (m < s[1]): # buscamos el maximo de las probabilidades por clase que nos devuelve el similarities
            m = s[1]
            sol_prop = s[0]
        if( sol_prop == '' ): sol_prop = sol[4][0] # en caso de que ninguna sea mayor que 0 lo ponemos en other

                
    text_id_sol_tfidf.write(str(i.iden)+" "+str(sol_prop))
    text_id_sol_tfidf.write('\n')

text_id_sol_tfidf.close()


print time.time()-t1
